# To deploy the app with mysql
version: '3.8'

services:
  app:
    build: . # Builds the Docker image using the Dockerfile in the current directory
    ports:
      - "5000:5000"
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
    environment:
      MYSQL_DATABASE_USER: root
      MYSQL_DATABASE_PASSWORD: password
      MYSQL_DATABASE_DB: mydatabase
      MYSQL_DATABASE_HOST: db
      MYSQL_DATABASE_PORT: 3306
    links:
      - db

  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
    ports:
      - "3306:3306"
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mysql_data:

networks:
  app_network:



# # To deploy flask app with postgres
# version: '3.8'

# services:
#   app:
#     build: . # This will build the container from the Dockerfile stored locally.
#     ports:
#       - "5000:5000"
#     networks:
#       - cool_network 
#     depends_on:
#       db:
#         condition: service_healthy   # Will wait for db to be ready
#     environment:
#       FLASK_ENV: development
#       DB_USER: postgres
#       DB_PASSWORD: password
#       DB_HOST: db
#       DB_PORT: 5432
#       DB_NAME: mydatabase
#     links:
#       - db

#   db:
#     image: postgres:latest
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: password
#       POSTGRES_DB: mydatabase
#     ports:
#       - "5432:5432"
#     restart: always
#     volumes:
#       - postgres_data_new:/var/lib/postgresql/data
#     networks:
#       - cool_network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -t 1"]
#       interval: 10s
#       timeout: 10s
#       retries: 10
#       start_period: 10s

# volumes:
#   postgres_data_new:

# networks:
#   cool_network:

 
# docker-compose up --build
# This will build the Flask app image, start the PostgreSQL container, and run the application. 
# The depends_on with condition: service_healthy ensures the app starts only after the database is ready.

# install docker compose 
# sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
# sudo chmod +x /usr/local/bin/docker-compose
#docker-compose version